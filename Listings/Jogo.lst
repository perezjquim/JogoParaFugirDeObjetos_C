C51 COMPILER V9.56.0.0   JOGO                                                              05/23/2017 22:55:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE JOGO
OBJECT MODULE PLACED IN .\Objects\Jogo.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Jogo.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Jogo
                    -.lst) TABS(2) OBJECT(.\Objects\Jogo.obj)

line level    source

   1          /*  Livrarias */
   2          #include <reg51.h>
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          /**************/
   6          
   7          /*  Portas  */
   8          sbit Input = P3;
   9          #define DisplayX P2
  10          #define DisplayY P1
  11          /************/
  12          
  13          /* Constantes auxiliares (microcontrolador) */
  14          #define TEMPO_HIGH  0x3C                  // Byte mais significativo do timer 0 - 50 ms (12MHz)
  15          #define TEMPO_LOW 0xAF                    // Byte menos significativo do timer 0 - 50 ms (12MHz)
  16          #define TEMPO_T1 0x70                     // 0x70 Tempo do timer 1 - 112 us (12MHz)
  17          #define VAZIO 0xFF                        // Porta vazia (tudo desligado)
  18          #define INTERRUPCOES_ESTADO_INICIAL 143   // Estado das interrupções ao ser corrido o programa
  19          /********************************************/
  20          
  21          /*  Constantes auxiliares (jogo)  */
  22          #define GAMEOVER 5            // ID da ima gem do gameover
  23          #define VICTORY 6             // ID da imagem da vitória
  24          #define NR_IMAGENS 7          // Número de imagens
  25          #define NR_LINHAS 7           // Número total de linhas
  26          #define POS_JOGADOR 6         // Coordenada Y do jogador (última linha)
  27          #define POS_JOGADOR_INICIAL 4         // Posição inicial do jogador (no meio da linha)
  28          #define VIDAS_INICIAL 4       // Nº de vidas para o jogador (3 vidas)
  29          #define DIFICULDADE1 20       // Velocidade a que descem os obstáculos (dificuldade)
  30          #define DIFICULDADE2 18       // Velocidade a que descem os obstáculos (dificuldade)
  31          #define DIFICULDADE3 15       // Velocidade a que descem os obstáculos (dificuldade)
  32          #define DIFICULDADE4 10       // Velocidade a que descem os obstáculos (dificuldade)
  33          #define DIFICULDADE5 7        // Velocidade a que descem os obstáculos (dificuldade)
  34          #define LIMITE_X_DIREITA 1    // Limite direito do display em relação ao X
  35          #define LIMITE_X_ESQUERDA 16  // Limite esquerdo do display em relação ao X
  36          #define LINHA_VAZIA 0         // Representa uma linha vazia (imagem com os LEDs todos desligados)
  37          /**********************************/
  38          
  39          /*  Variáveis do jogo */
  40          char ImagemAtual;           // Variável com o número da imagem
  41          char LinhaAtual;            // Variável para guardar o número de linha
  42          char ImagemX[NR_LINHAS];    // Display com 7 valores
  43          
  44          char VidasRestantes;        // Vidas restantes do jogador
  45          char TempoObstaculos;       // Tempo (restante) antes de descerem (novamente) os obstáculos
  46          char DificuldadeAtual;      // Dificuldade atual do jogo (tempo estipulado para a frequência com que os obstá
             -culos vão descendo)
  47          char ObstaculosInicio;      // Limite superior dos obstáculos
  48          char NivelAtual = 1;        // Nível atual do jogo (que representa a imagem do vetor a ser desenhada)
  49          /**********************/
  50          
  51          /*  Conjunto de imagens do jogo */
  52          static char Imagens[NR_IMAGENS][NR_LINHAS - 1] = 
  53          {{3, 2, 1, 6, 0, 0},    // Nível 1
C51 COMPILER V9.56.0.0   JOGO                                                              05/23/2017 22:55:21 PAGE 2   

  54          {4, 3, 2, 6, 0, 0},   // Nível 2
  55          {7, 6, 2, 6, 0, 0},   // Nível 3
  56          {8, 2, 3, 6, 0, 0},   // Nível 4
  57          {1, 4, 4, 6, 0, 0},   // Nível 5
  58          {17,10,4,10,17,0},      // Game over
  59          {31,31,31,31,31,31}}; // Vitória
  60          /********************************/
  61          
  62          /*  Vetor para ativar as linhas do display  */
  63          static char ImagemY[NR_LINHAS] = 
  64          {254, 253, 251, 247, 239, 223, 191};
  65          /********************************************/
  66          
  67          /* Função para desenhar uma nova imagem no ecrã */
  68          void desenharNovaImagem()
  69          {
  70   1         int i;       
  71   1         for (i = 0; i < POS_JOGADOR; i++)
  72   1            ImagemX[i] = Imagens[ImagemAtual][i];   //Atualiza a linha com a nova imagem
  73   1      }
  74          /************************************************/
  75          
  76          /* Função para mover todos os obstáculos (uma "casa" para baixo)  */
  77          void moverObstaculos()
  78          {
  79   1        int i;
  80   1        for (i = POS_JOGADOR - 1; i > ObstaculosInicio ; i--)     //Percorre todas as linhas
  81   1            ImagemX[i] = ImagemX[i-1];              //Puxa a imagem da linha (acima) para baixo
  82   1        if(ObstaculosInicio < NR_LINHAS - 1)        //Se os obstáculos ainda não chegaram até ao fim
  83   1        {
  84   2          ImagemX[ObstaculosInicio] = LINHA_VAZIA;  //Apaga a "primeira" linha dos obstáculos
  85   2          ObstaculosInicio++;                       //Incrementa a posição onde "começam" os obstáculos
  86   2        }
  87   1      }
  88          /******************************************************************/
  89          
  90          /*  Função para verificar se há colisão entre o jogador e um obstáculo  */
  91          void verificarColisoes(void)
  92          {
  93   1        if(ImagemX[POS_JOGADOR] & ImagemX[POS_JOGADOR - 1]) //Se houver "interseção" (colisão)
  94   1          VidasRestantes--;                                                  //Decrementa a quantidade de vidas restantes
  95   1      }
  96          /************************************************************************/
  97          
  98          /* Função para mover o jogador para a esquerda (quando é premido o devido botão)  */
  99          void moverJogadorEsquerda() interrupt 0
 100          {
 101   1        if(ImagemX[POS_JOGADOR] != LIMITE_X_ESQUERDA) //Se não tiver encostado na borda esquerda
 102   1          ImagemX[POS_JOGADOR] *= 2;                  //O jogador anda para a esquerda (shift left)
 103   1      }
 104          /**********************************************************************************/
 105          
 106          /* Função para mover o jogador para a direita (quando é premido o devido botão) */
 107          void moverJogadorDireita() interrupt 2
 108          {
 109   1        if(ImagemX[POS_JOGADOR] != LIMITE_X_DIREITA)  //Se não tiver encostado na borda direita
 110   1          ImagemX[POS_JOGADOR] /= 2;                  //O jogador anda para a direita (shift right)
 111   1      }
 112          /********************************************************************************/
 113          
 114          /*  Função de controlo para os obstáculos (que é feita a cada segundo)  */
 115          /*  (verificar se há colisão e movê-los para baixo)                     */
C51 COMPILER V9.56.0.0   JOGO                                                              05/23/2017 22:55:21 PAGE 3   

 116          void verificarObstaculos() interrupt 1
 117          { 
 118   1         // Reinicializa o timer
 119   1         TH0 = TEMPO_HIGH;      
 120   1         TL0 = TEMPO_LOW;
 121   1        
 122   1         TempoObstaculos--;           // Decrementa a contagem (de 1 segundo)
 123   1        
 124   1         // Caso a contagem tenha chegado ao fim,
 125   1         // Passa às verificações e ações dos obstáculos
 126   1         if (TempoObstaculos == 0)    
 127   1         {
 128   2            verificarColisoes();              // Verifica se há colisão entre o jogador e um obstáculo
 129   2            TempoObstaculos = DificuldadeAtual;   // Reinicializa a contagem
 130   2            moverObstaculos();                    // Move os obstáculos para baixo
 131   2         }
 132   1      }
 133          /************************************************************************/
 134          
 135          /*  Função para varrer o display  */
 136          void varrerDisplay(void) interrupt 3
 137          {
 138   1         DisplayY = VAZIO;                // Desliga todas as linhas de sa?da
 139   1         DisplayX = ImagemX[LinhaAtual];  // Mostra a linha
 140   1         DisplayY = ImagemY[LinhaAtual];  // Activa a linha
 141   1         LinhaAtual++;                    // Passa para a próxima linha
 142   1        
 143   1         if (LinhaAtual == NR_LINHAS)     // Caso tenha chegado à ultima linha,
 144   1          LinhaAtual = 0;                 // Passa novamente para a primeira linha
 145   1      }
 146          /**********************************/
 147          
 148          /*  Função para desenhar os obstáculos pela primeira vez  */
 149          /*  (consoante a imagem (dos obstáculos) do devido nível) */
 150          void inicializarObstaculos()
 151          {
 152   1         ObstaculosInicio = 0;            // A "primeira" linha dos obstáculos começa no topo do display
 153   1         ImagemAtual = NivelAtual - 1;    // Busca a imagem do nível atual
 154   1         desenharNovaImagem();            // Desenha a imagem do nível atual
 155   1      }
 156          /**********************************************************/
 157          
 158          /*  Função para desenhar pela primeira vez o jogador (na sua posição inicial) */
 159          void inicializarJogador()
 160          {
 161   1         ImagemX[POS_JOGADOR] = POS_JOGADOR_INICIAL;  //O jogador fica na sua posição inicial
 162   1      }
 163          /******************************************************************************/
 164          
 165          /*  Função para ligar as interrupções (com o estado adequado) */
 166          void ligarInterrupcoes(void)
 167          {
 168   1         TMOD = 33;                         // Timer 0 de 16 bits - #00100001b
 169   1         TH0 = TEMPO_HIGH;                  // Timer 0 = 50 ms
 170   1         TL0 = TEMPO_LOW; 
 171   1         TH1 = TEMPO_T1;                    // Timer 1 = 112 us
 172   1         TL1 = TEMPO_T1; 
 173   1         IP = 0;                            // Não altera as prioridades
 174   1         IE = INTERRUPCOES_ESTADO_INICIAL;  // Activa as interrupções - #10001111b:
 175   1         IT0 = 1;                           // Ext0 detectada na transição descendente
 176   1         IT1 = 1;                           // Ext1 detectada na transição descendente
 177   1         TR0 = 1;                           // Inicia timer 0
C51 COMPILER V9.56.0.0   JOGO                                                              05/23/2017 22:55:21 PAGE 4   

 178   1         TR1 = 1;                           // Inicia timer 1
 179   1         LinhaAtual = 0;                    // Indica que é para mostrar a primeira linha
 180   1         Input = VAZIO;                     // Porta de entrada é limpa
 181   1      }
 182          /**************************************************************/
 183          
 184          /*  Função para desligar as interrupções */
 185          void desligarInterrupcoes(void)
 186          {
 187   1        TR0 = 0;                  // Desliga o timer do verificarObstáculos (que traz os obstáculos para baixo)
 188   1      }
 189          /*****************************************/
 190          
 191          /* Função para mostrar a imagem de GameOver (quando o jogador perde todas as vidas num nível) */
 192          void gameOver()
 193          {
 194   1        ImagemAtual = GAMEOVER;   //Busca a imagem do GameOver
 195   1        desenharNovaImagem();     //Desenha essa imagem
 196   1        desligarInterrupcoes();
 197   1        for(;;);                  //Fica em loop
 198   1      }
 199          /**********************************************************************************************/
 200          
 201          /* Função para mostrar a imagem da vitória (quando o jogador passa com sucesso por todos os níveis) */
 202          void victory()
 203          {
 204   1        ImagemAtual = VICTORY;    //Busca a imagem da vitória
 205   1        desenharNovaImagem();     //Desenha essa imagem
 206   1        desligarInterrupcoes();
 207   1        for(;;);                  //Fica em loop
 208   1      }
 209          /****************************************************************************************************/
 210          
 211          /* Função para jogar um dado nível do jogo */
 212          void jogar(double dificuldade)
 213          {
 214   1        //Busca no argumento 'dificuldade' o tempo que demora os obstáculos a descer
 215   1        DificuldadeAtual = dificuldade;     
 216   1        TempoObstaculos = DificuldadeAtual;
 217   1        
 218   1        inicializarJogador();             //O jogador é inicializado no display
 219   1        inicializarObstaculos();          //Os obstáculos do nível são inicializados no display
 220   1      
 221   1        //Ciclo do jogo propriamente dito
 222   1        while(VidasRestantes && ObstaculosInicio < NR_LINHAS - 1) {}
 223   1        
 224   1        //Caso tenha acabado o nível com sucesso,
 225   1        //Passa para o próximo nível
 226   1        if(VidasRestantes)
 227   1        {
 228   2          NivelAtual++;   
 229   2          return;
 230   2        }
 231   1        
 232   1        //Caso contrário,
 233   1        //Mostra a imagem de GameOver
 234   1        gameOver();
 235   1      }
 236          /*******************************************/
 237          
 238          /********************************************/
 239          /*            Função principal              */
C51 COMPILER V9.56.0.0   JOGO                                                              05/23/2017 22:55:21 PAGE 5   

 240          /********************************************/
 241          void main()
 242          {
 243   1        ligarInterrupcoes();      //Liga as interrupções
 244   1        VidasRestantes = VIDAS_INICIAL;   //vidas restantes do jogador é inicializada
 245   1        
 246   1        jogar(DIFICULDADE1);      //Nível 1 do jogo
 247   1        jogar(DIFICULDADE2);      //Nível 2 do jogo
 248   1        jogar(DIFICULDADE3);      //Nível 3 do jogo
 249   1        jogar(DIFICULDADE4);      //Nível 4 do jogo
 250   1        jogar(DIFICULDADE5);      //Nível 5 do jogo
 251   1      
 252   1        //Caso tenha passado por todos os níveis sem perder as vidas todas
 253   1        //Mostra a imagem da vitória
 254   1        victory();
 255   1      }
 256          /********************************************/
 257          /********************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    412    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     63    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
